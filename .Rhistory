# 2-1-2 获取每个组 IRI 的统计信息
IRI_summary_subset <- iri %>%
group_by(STATE_CODE, SHRP_ID) %>%
summarize(
IRI_min = min(IRI, na.rm = TRUE),
IRI_max = max(IRI, na.rm = TRUE),
IRI_mean = mean(IRI, na.rm = TRUE)
)
#获取 IRI_summary_subset 的行数和列数
dim(IRI_summary_subset)
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
View(iri_subset)
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
View(IRI_summary_subset)
# 2-1-2 获取每个组 IRI 的统计信息
IRI_summary_subset <- iri %>%
group_by(STATE_CODE, SHRP_ID) %>%
summarize(
IRI_min = min(IRI, na.rm = TRUE),
IRI_max = max(IRI, na.rm = TRUE),
IRI_mean = mean(IRI, na.rm = TRUE)
)
#获取 IRI_summary_subset 的行数和列数
dim(IRI_summary_subset)
# 2-1-2 获取每个组 IRI 的统计信息
IRI_summary_subset <- iri %>%
group_by(STATE_CODE, SHRP_ID) %>%
summarize(
IRI_min = min(IRI, na.rm = TRUE),
IRI_max = max(IRI, na.rm = TRUE),
IRI_mean = mean(IRI, na.rm = TRUE)
)
#获取 IRI_summary_subset 的行数和列数
dim(IRI_summary_subset)
# 2-1-3 以 IRI 的平均值降序进行排序
sorted_IRI_summary_subset <- IRI_summary_subset %>%
arrange(desc(IRI_mean))
# 仅输出一个部分的结果
selected_section <- sorted_IRI_summary_subset[1, ]
View(selected_section)
# 2-1-3 以 IRI 的平均值降序进行排序
sorted_IRI_summary_subset <- IRI_summary_subset %>%
arrange(desc(IRI_mean))
# 仅输出一个部分的结果
selected_section <- sorted_IRI_summary_subset[1, ]
# 2-1-4 绘制所选组 IRI 相对于时间的散点图
# 选取 STATE_CODE 为 6 且 SHRP_ID 以 "0aa602" 开头的组别
iri_subset_1 <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 4) == "0602")
# 导入 tidyr 包
library(tidyr)
# 对时间进行分割处理
iri_sep <- iri_subset_1 %>%
tidyr::separate(col = VISIT_DATE, into = c("DATE", "TIME"), sep = ",") %>%
tidyr::separate(col = DATE, into = c("MONTH", "DAY", "YEAR"), sep = "/")
# 对年份进行补全处理
for (i in 1:nrow(iri_sep)) {
if (iri_sep$YEAR[i] <= "99" && iri_sep$YEAR[i] >= "06") {
iri_sep$YEAR[i] <- paste("19", iri_sep$YEAR[i], sep="")
} else {
iri_sep$YEAR[i] <- paste("20", iri_sep$YEAR[i], sep="")
}
}
# 以时间的升序进行排序
sorted_iri_subset_1 <- iri_sep %>%
mutate(NEW_TIME = paste(YEAR, MONTH, DAY, TIME, sep = "/")) %>%
arrange(NEW_TIME)
# 导入 ggplot2 包
library(ggplot2)
# 绘制散点图
ggplot(data = sorted_iri_subset_1, aes(x = NEW_TIME, y = IRI)) +
geom_point() +
labs(x = "时间", y = "均值") +
ggtitle("均值时间图")  +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# 2-1-4 绘制所选组 IRI 相对于时间的散点图
# 选取 STATE_CODE 为 6 且 SHRP_ID 以 "0aa602" 开头的组别
iri_subset_1 <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 4) == "0602")
# 导入 tidyr 包
library(tidyr)
# 对时间进行分割处理
iri_sep <- iri_subset_1 %>%
tidyr::separate(col = VISIT_DATE, into = c("DATE", "TIME"), sep = ",") %>%
tidyr::separate(col = DATE, into = c("MONTH", "DAY", "YEAR"), sep = "/")
# 对年份进行补全处理
for (i in 1:nrow(iri_sep)) {
if (iri_sep$YEAR[i] <= "99" && iri_sep$YEAR[i] >= "06") {
iri_sep$YEAR[i] <- paste("19", iri_sep$YEAR[i], sep="")
} else {
iri_sep$YEAR[i] <- paste("20", iri_sep$YEAR[i], sep="")
}
}
# 以时间的升序进行排序
sorted_iri_subset_1 <- iri_sep %>%
mutate(NEW_TIME = paste(YEAR, MONTH, DAY, TIME, sep = "/")) %>%
arrange(NEW_TIME)
# 导入 ggplot2 包
library(ggplot2)
# 绘制散点图
ggplot(data = sorted_iri_subset_1, aes(x = NEW_TIME, y = IRI)) +
geom_point() +
labs(x = "时间", y = "均值") +
ggtitle("均值时间图")  +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
View(sorted_iri_subset_1)
# 2-1-4 绘制所选组 IRI 相对于时间的散点图
# 选取 STATE_CODE 为 6 且 SHRP_ID 以 "0aa602" 开头的组别
iri_subset_1 <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 4) == "0602")
# 导入 tidyr 包
library(tidyr)
# 对时间进行分割处理
iri_sep <- iri_subset_1 %>%
tidyr::separate(col = VISIT_DATE, into = c("DATE", "TIME"), sep = ",") %>%
tidyr::separate(col = DATE, into = c("MONTH", "DAY", "YEAR"), sep = "/")
# 对年份进行补全处理
for (i in 1:nrow(iri_sep)) {
if (iri_sep$YEAR[i] <= "99" && iri_sep$YEAR[i] >= "06") {
iri_sep$YEAR[i] <- paste("19", iri_sep$YEAR[i], sep="")
} else {
iri_sep$YEAR[i] <- paste("20", iri_sep$YEAR[i], sep="")
}
}
# 以时间的升序进行排序
sorted_iri_subset_1 <- iri_sep %>%
mutate(NEW_TIME = paste(YEAR, MONTH, DAY, TIME, sep = "/")) %>%
arrange(NEW_TIME)
# 导入 ggplot2 包
library(ggplot2)
# 绘制散点图
ggplot(data = sorted_iri_subset_1, aes(x = NEW_TIME, y = IRI)) +
geom_point() +
labs(x = "时间", y = "均值") +
ggtitle("均值时间图")  +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
View(iri_subset_1)
View(iri_sep)
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
# 2-2-2 统计实验对象中每种受伤程度的人数
data_each_injury_severity = data_person %>%
group_by(INJ_SEV) %>%
summarise(count=n())
# 2-2-3 合并 ACCIDENT 和 VEHICLE 两个文件，输出合并结果的维度和数据集中缺失值的数量
data_vehicle <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/VEHICLE.csv")
data_accident_vehicle <- left_join(data_accident, data_vehicle, by = c("CASENUM", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM",
"VE_FORMS", "MONTH", "HOUR", "MINUTE",
"HARM_EV", "MAN_COLL", "PSUSTRAT", "WEIGHT"))
dim(data_accident_vehicle)
sum(is.na(data_accident_vehicle))
View(intersection)
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
View(data_each_injury_severity)
# 2-2-2 统计实验对象中每种受伤程度的人数
data_each_injury_severity = data_person %>%
group_by(INJ_SEV) %>%
summarise(count=n())
# 2-2-2 统计实验对象中每种受伤程度的人数
data_each_injury_severity = data_person %>%
group_by(INJ_SEV) %>%
summarise(count=n())
View(data_accident_vehicle)
# 2-2-3 合并 ACCIDENT 和 VEHICLE 两个文件，输出合并结果的维度和数据集中缺失值的数量
data_vehicle <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/VEHICLE.csv")
data_accident_vehicle <- left_join(data_accident, data_vehicle, by = c("CASENUM", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM",
"VE_FORMS", "MONTH", "HOUR", "MINUTE",
"HARM_EV", "MAN_COLL", "PSUSTRAT", "WEIGHT"))
dim(data_accident_vehicle)
sum(is.na(data_accident_vehicle))
# 2-2-3 合并 ACCIDENT 和 VEHICLE 两个文件，输出结果数据集的维度以及结果数据集中缺失值的数量
data_vehicle <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/VEHICLE.csv")
data_accident_vehicle <- left_join(data_accident, data_vehicle, by = c("CASENUM", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM",
"VE_FORMS", "MONTH", "HOUR", "MINUTE",
"HARM_EV", "MAN_COLL", "PSUSTRAT", "WEIGHT"))
# 获取结果数据集的行数和列数
dim(data_accident_vehicle)
# 获取结果数据集中缺失值的数量
sum(is.na(data_accident_vehicle))
# 2-2-3 合并 ACCIDENT 和 VEHICLE 两个文件，输出结果数据集的维度以及结果数据集中缺失值的数量
data_vehicle <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/VEHICLE.csv")
data_accident_vehicle <- left_join(data_accident, data_vehicle, by = c("CASENUM", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM",
"VE_FORMS", "MONTH", "HOUR", "MINUTE",
"HARM_EV", "MAN_COLL", "PSUSTRAT", "WEIGHT"))
# 获取结果数据集的行数和列数
dim(data_accident_vehicle)
# 获取结果数据集中缺失值的数量
sum(is.na(data_accident_vehicle))
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
View(iri_subset)
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 获取子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 获取子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
View(iri_subset)
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 获取子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
# 1-1
# 导入数据
df <- read.csv("data/01_assignment_1_1_data.csv")
# 获取数据的行数和列数
df
dim(df)
# 绘制散点图
plot(df, main = "Scatter Plot", xlab = "X-Axis", ylab = "Y-Axis")
# 1-2
# 初始化一个变量，用于存储总和
sum <- 0
# 生成长度为 50 的随机数向量
random_vector <- runif(50)
# 循环累加随机数向量中的值
for (i in 1:50) {
sum <- sum + random_vector[i]
}
# 计算平均值
mean_value <- sum / 50
# 输出向量和平均值
random_vector
cat("随机数向量的平均值为:", mean_value)
# 1-2
# 初始化一个变量，用于存储随机数向量的总和
sum <- 0
# 生成长度为 50 的随机数向量
random_vector <- runif(50)
# 循环累加随机数向量中的值
for (i in 1:50) {
sum <- sum + random_vector[i]
}
# 计算平均值
mean_value <- sum / 50
# 输出随机数向量和随机数向量的平均值
random_vector
cat("随机数向量的平均值为:", mean_value)
# 1-2
# 初始化一个变量，用于存储随机数向量的总和
sum <- 0
# 生成长度为 50 的随机数向量
random_vector <- runif(50)
# 循环累加随机数向量中的值
for (i in 1:50) {
sum <- sum + random_vector[i]
}
# 计算平均值
mean_value <- sum / 50
# 输出随机数向量和随机数向量的平均值
random_vector
cat("随机数向量的平均值为:", mean_value)
# 1-2
# 初始化一个变量，用于存储随机数向量的总和
sum <- 0
# 生成长度为 50 的随机数向量
random_vector <- runif(50)
# 循环累加随机数向量中的值
for (i in 1:50) {
sum <- sum + random_vector[i]
}
# 计算平均值
mean_value <- sum / 50
# 输出随机数向量和随机数向量的平均值
random_vector
cat("随机数向量的平均值为:", mean_value)
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
View(intersection)
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
# 2-2-1 获取 ACCIDENT 和 PERSON 两个文件的交集
# 导入 dplyr 包
library(dplyr)
# 读取第一个 CSV 文件
data_person <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/PERSON.csv")
# 读取第二个 CSV 文件
data_accident <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/ACCIDENT.csv")
# 转换数据格式，不使用科学计数法
options(scipen = 200)
# 获取两个数据框的交集
intersection <- inner_join(data_person, data_accident, by = c("CASENUM", "VE_FORMS", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM", "MONTH",
"HOUR", "MINUTE", "HARM_EV", "MAN_COLL",
"SCH_BUS", "PSUSTRAT", "WEIGHT"))
# 2-2-2 统计实验对象中每种受伤程度的人数
data_each_injury_severity = data_person %>%
group_by(INJ_SEV) %>%
summarise(count=n())
# 2-2-3 合并 ACCIDENT 和 VEHICLE 两个文件，输出结果数据集的维度以及结果数据集中缺失值的数量
data_vehicle <- read.csv("data/2023-11-02_data-assignment/data-assignment/CRSS/VEHICLE.csv")
data_accident_vehicle <- left_join(data_accident, data_vehicle, by = c("CASENUM", "REGION", "PSU", "PJ",
"PSU_VAR", "URBANICITY", "STRATUM",
"VE_FORMS", "MONTH", "HOUR", "MINUTE",
"HARM_EV", "MAN_COLL", "PSUSTRAT", "WEIGHT"))
# 获取结果数据集的行数和列数
dim(data_accident_vehicle)
# 获取结果数据集中缺失值的数量
sum(is.na(data_accident_vehicle))
View(data_accident)
View(data_accident_vehicle)
View(intersection)
View(data_vehicle)
View(data_person)
View(data_each_injury_severity)
# 2-1-1 获取 STATE_CODE 为 6 且 SHRP_ID 以 “050” 开头的子集
# 导入 dplyr 包
library(dplyr)
# 导入数据
iri <- read.csv("data/2023-11-02_data-assignment/data-assignment/LTPP/iri.csv")
# 获取子集
iri_subset <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 3) == "050")
# 获取 iri_subset 的行数和列数
dim(iri_subset)
# 2-1-2 获取每个组 IRI 的统计信息
IRI_summary_subset <- iri %>%
group_by(STATE_CODE, SHRP_ID) %>%
summarize(
IRI_min = min(IRI, na.rm = TRUE),
IRI_max = max(IRI, na.rm = TRUE),
IRI_mean = mean(IRI, na.rm = TRUE)
)
#获取 IRI_summary_subset 的行数和列数
dim(IRI_summary_subset)
# 2-1-3 以 IRI 的平均值降序进行排序
sorted_IRI_summary_subset <- IRI_summary_subset %>%
arrange(desc(IRI_mean))
# 仅输出一个部分的结果
selected_section <- sorted_IRI_summary_subset[1, ]
# 2-1-4 绘制所选组 IRI 相对于时间的散点图
# 选取 STATE_CODE 为 6 且 SHRP_ID 以 "0aa602" 开头的组别
iri_subset_1 <- iri %>%
filter(STATE_CODE == 6 & substring(SHRP_ID, 1, 4) == "0602")
# 导入 tidyr 包
library(tidyr)
# 对时间进行分割处理
iri_sep <- iri_subset_1 %>%
tidyr::separate(col = VISIT_DATE, into = c("DATE", "TIME"), sep = ",") %>%
tidyr::separate(col = DATE, into = c("MONTH", "DAY", "YEAR"), sep = "/")
# 对年份进行补全处理
for (i in 1:nrow(iri_sep)) {
if (iri_sep$YEAR[i] <= "99" && iri_sep$YEAR[i] >= "06") {
iri_sep$YEAR[i] <- paste("19", iri_sep$YEAR[i], sep="")
} else {
iri_sep$YEAR[i] <- paste("20", iri_sep$YEAR[i], sep="")
}
}
# 以时间的升序进行排序
sorted_iri_subset_1 <- iri_sep %>%
mutate(NEW_TIME = paste(YEAR, MONTH, DAY, TIME, sep = "/")) %>%
arrange(NEW_TIME)
# 导入 ggplot2 包
library(ggplot2)
# 绘制散点图
ggplot(data = sorted_iri_subset_1, aes(x = NEW_TIME, y = IRI)) +
geom_point() +
labs(x = "时间", y = "均值") +
ggtitle("均值时间图")  +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
View(sorted_IRI_summary_subset)
View(sorted_iri_subset_1)
View(iri)
# 1-1
# 导入数据
df <- read.csv("data/01_assignment_1_1_data.csv")
# 获取数据的行数和列数
df
dim(df)
# 绘制散点图
plot(df, main = "Scatter Plot", xlab = "X-Axis", ylab = "Y-Axis")
# 1-2
# 初始化一个变量，用于存储随机数向量的总和
sum <- 0
# 生成长度为 50 的随机数向量
random_vector <- runif(50)
# 循环累加随机数向量中的值
for (i in 1:50) {
sum <- sum + random_vector[i]
}
# 计算平均值
mean_value <- sum / 50
# 输出随机数向量和随机数向量的平均值
random_vector
cat("随机数向量的平均值为:", mean_value)
